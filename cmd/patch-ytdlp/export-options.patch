diff --git a/yt_dlp/options.py b/yt_dlp/options.py
index 76db06c..79a54e9 100644
--- a/yt_dlp/options.py
+++ b/yt_dlp/options.py
@@ -7,6 +7,7 @@
 import shutil
 import string
 import sys
+import json
 
 from .compat import compat_expanduser
 from .cookies import SUPPORTED_BROWSERS, SUPPORTED_KEYRINGS
@@ -267,6 +268,81 @@ def _dict_from_options_callback(
             out_dict[key] = [*out_dict.get(key, []), val] if append else val
         setattr(parser.values, option.dest, out_dict)
 
+    def _export_options_callback(option, opt_str, value, parser: _YoutubeDLOptionParser):
+        from .extractor import list_extractor_classes
+        from .extractor.generic import GenericIE # Importing GenericIE is currently slow since it imports YoutubeIE
+
+        extractors = []
+
+        for ie in list_extractor_classes():
+            extractors.append({
+                "name": ie.IE_NAME,
+                "description": ie.description(markdown=False),
+                "broken": not ie.working(),
+                "age_limit": ie.age_limit or None,
+            })
+
+        data = {
+            'option_groups': [],
+            "extractors": extractors,
+            'channel': CHANNEL,
+            'version': __version__,
+        }
+
+        for group in parser.option_groups:
+            group_data = {
+                'name': group.title,
+                'description': group.description,
+                'options': []
+            }
+            for option in group.option_list:
+                if option.dest == parser.ALIAS_DEST:
+                    continue
+
+                default = option.default
+
+                # if default isn't serializable, try to convert it to a type that is.
+                if default == optparse.NO_DEFAULT:
+                    default = None
+                elif not isinstance(default, (str, int, float, bool, list, dict, type(None))):
+                    try:
+                        default = str(default)
+                    except Exception:
+                        default = None
+
+                option_data = {
+                    'id': option.dest,
+                    'action': str(option.action),
+                    'choices': list(option.choices) if option.choices else None,
+                    'help': option.help if option.help != optparse.SUPPRESS_HELP else None,
+                    'hidden': option.help == optparse.SUPPRESS_HELP,
+                    'meta_args': option.metavar,
+                    'type': str(option.type) if option.type else None,
+                    'long_flags': option._long_opts,
+                    'short_flags': option._short_opts,
+                    'nargs': option.nargs or 0,
+                    'default_value': default,
+                    'const_value': option.const,
+                }
+
+                if not option_data['type']:
+                    if option.action == 'store_true' or option.action == 'store_false':
+                        option_data['type'] = 'bool'
+                    elif option.nargs and option.nargs > 0:
+                        option_data['type'] = 'string'
+                elif option_data['type'] == 'choice':
+                    option_data['type'] = 'string'
+
+                # if help output contains %default, replace it with the actual default value.
+                if option_data['help'] and '%default' in option_data['help']:
+                    option_data['help'] = option_data['help'].replace('%default', str(option_data['default_value']))
+
+                group_data['options'].append(option_data)
+            data['option_groups'].append(group_data)
+
+        print(json.dumps(data, indent=4))
+        sys.exit()
+
     def when_prefix(default):
         return {
             'default': {},
@@ -499,6 +575,11 @@ def _alias_callback(option, opt_str, value, parser, opts, nargs):
             f'As a safety measure, each alias may be triggered a maximum of {_YoutubeDLOptionParser.ALIAS_TRIGGER_LIMIT} times. '
             'This option can be used multiple times'))
 
+    general.add_option(
+        '--export-options',
+        action='callback', default=False, callback=_export_options_callback,
+        help=optparse.SUPPRESS_HELP)
+
     network = optparse.OptionGroup(parser, 'Network Options')
     network.add_option(
         '--proxy', dest='proxy',
